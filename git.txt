********************************
git


安装
apt-get install git

/////////////////////////////////////////配置

git config --global user.name "rorntuck7"
git config --global user.email "604695517@qq.com"

/////////////////////////////////////////查看配置

git config --list


/////////////////////////////////////////创建版本库
第一步 创建一个空目录：
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

第二步，通过git init命令把这个目录变成Git可以管理的仓库：
git init


/////////////////////////////////////////添加文件到仓库
分两步：
使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成。


/////////////////////////////////////////版本回退
git log命令显示从最近到最远的提交日志
看得眼花缭乱的，可以试试加上--pretty=oneline参数：
git log --pretty=oneline


回退到上一个版本
git reset --hard HEAD^

git reset --hard 版本号 不用写全

git reflog用来记录你的每一次命令

/////////////////////////////////////////撤销修改

git checkout -- readme.txt

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，版本回退，不过前提是没有推送到远程库。


/////////////////////////////////////////删除文件

git rm test.txt
git commit -m "remove test.txt"


/////////////////////////////////////////添加远程库

你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库
点击“Create repository”按钮，就成功地创建了一个新的Git仓库：


1.本地仓库与之关联 
git remote add origin git@github.com:michaelliao/learngit.git

2.下一步，就可以把本地库的所有内容推送到远程库上：
git push -u origin master

由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

git push origin master


/////////////////////////////////////////远程库克隆

 git clone git@github.com:michaelliao/gitskills.git


/////////////////////////////////////////创建合并分支
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


/////////////////////////////////////////解决冲突


当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图。

git log --graph --pretty=oneline --abbrev-commit


/////////////////////////////////////////分支管理策略

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。

如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
git merge --no-ff -m "merge with no-ff" dev

因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并后，我们用git log看看分支历史：

$ git log --graph --pretty=oneline --abbrev-commit

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

/////////////////////////////////////////bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。


/////////////////////////////////////////feature分支
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。


/////////////////////////////////////////多人协作
